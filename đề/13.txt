1. (2 điểm) Hiển thị ảnh I và độ cao, độ rộng của ảnh.
2. (4 điểm) Chuyển ảnh mầu I sang ảnh đa cấp xám (grayscale) theo công thức xác định mức độ xám từ tổ hợp các thành phần mầu (r,g,b) theo tỷ lệ (0.39,0.5,0.11), được ma trận ảnh Ig. Hiển thị ảnh Ig. Xác định mức xám trung bình của ảnh Ig.
3. (1 điểm) Hiển thị các độ xám của của cửa sổ lân cận 5x5 của pixel có tọa độ dòng y=109, cột x=130 của ảnh Ig.
4. (1.5 điểm) Lấy biên của ảnh Ig theo phương pháp Canny được ảnh biên Ie là ảnh nhị phân nền đen. Hiển thị ảnh Ie. Kiểm tra các điểm ảnh của pixel có tọa độ dòng  y=109, cột x=130 có phải là điểm biên của Ig theo phương pháp dò biên Canny.
5. (1.5 điểm). Nhị phân ảnh Ig theo ngưỡng Otsu được ảnh nhị phân nền đen Ib. Xác định các đường contour của ảnh Ib gần tương tự với đường tròn. Vẽ các đường contour trên lên ảnh gốc I. Hiển thị ảnh I.

import cv2
import numpy as np

I = cv2.imread("Coins.jpg")
cv2.imshow("Anh goc",I)
print("Độ cao :",I.shape[0])
print("Độ rộng :",I.shape[1])

Ig=0.39*I[:,:,2] + 0.5*I[:,:,1]+0.11*I[:,:,0]
Ig_show = Ig.astype('uint8')

cv2.imshow("Gray ",Ig_show)

print("Mức xám trung bình của ảnh Ig: ", np.mean(Ig_show))
#3
y = 109
x = 130
height = Ig.shape[0]
width = Ig.shape[1]
for k in range(-1, 4):
  for l in range(-1, 4):
    if ((y + k) >= 0) & ((y + k) <= height - 1) & ((x + l) >= 0) & ((x + l) <= width - 1):
      print("Các mức độ xám của cửa sổ lân cận 5x5 điểm ảnh Ig(y="+str(y)+",x="+str(x)+")",Ig[y + k, x + l])
#4
Ie = cv2.Canny(I,0,255)
cv2.imshow("Phuong phap Candy",Ie)
y = 109
x = 130
if Ie[y][x] == 255:
    print("Điểm ảnh Ig(y="+str(y)+",x="+str(x)+") là điểm điểm biên theo Canny")
else:
    print("Điểm ảnh Ig(y="+str(y)+",x="+str(x)+") không là điểm điểm biên theo Canny")

#5
ret, Ib = cv2.threshold(Ig_show, 0, 255, cv2.THRESH_OTSU) 
print("Ngưỡng", ret) 


contours, _ = cv2.findContours(Ib, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

for cnt in contours:
    approx = cv2.approxPolyDP(cnt,0.01*cv2.arcLength(cnt,True),True)  
    area = cv2.contourArea(cnt) 
    if (len(approx) > 8):
      min_per = area
      break

for cnt in contours:
    approx = cv2.approxPolyDP(cnt,0.01*cv2.arcLength(cnt,True),True)   
    area = cv2.contourArea(cnt) 
    if ((len(approx) > 8) & (min_per > area) & (area>30)):
      min_per = area
     
contour_list = []
for contour in contours:
    approx = cv2.approxPolyDP(contour,0.01*cv2.arcLength(contour,True),True)
    area = cv2.contourArea(contour)
    if ((len(approx) > 8) & (area > min_per) ):
        contour_list.append(contour)

I1 = I.copy()
cv2.drawContours(I1, contour_list, -1, (0, 255, 0), 2)
cv2.imshow("Ve Contour",I1) 

cv2.waitKey()
